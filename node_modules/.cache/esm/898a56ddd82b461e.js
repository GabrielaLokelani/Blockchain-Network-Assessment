let Transaction,createDate,faucetPublicKeyComp,faucetAddress,faucetPrivKey,MIEWCOIN_BLOCKCHAIN;_d82‍.x([["faucetTransaction",()=>faucetTransaction],["initFaucetServer",()=>initFaucetServer]]);_d82‍.w("./transaction",[["default",["Transaction"],function(v){Transaction=v}]]);_d82‍.w("./block",[["createDate",["createDate"],function(v){createDate=v}]]);_d82‍.w("./faucetWallet",[["faucetPublicKeyComp",["faucetPublicKeyComp"],function(v){faucetPublicKeyComp=v}],["faucetAddress",["faucetAddress"],function(v){faucetAddress=v}],["faucetPrivKey",["faucetPrivKey"],function(v){faucetPrivKey=v}]]);_d82‍.w("../index",[["MIEWCOIN_BLOCKCHAIN",["MIEWCOIN_BLOCKCHAIN"],function(v){MIEWCOIN_BLOCKCHAIN=v}]]);// IMPORT RELEVANT LIBRARIES
const CryptoJS = require('crypto-js');
const EC = require('elliptic').ec;
const ec = new EC('secp256k1');
var crypto = require('crypto');
const express = require('express');
const WebSocket = require('ws');
const path = require('path')





const faucetHttp_port = 7777;

       function faucetTransaction(toAddress, requestAmount) {
    if (requestAmount <= 1000000 && toAddress) {
        const faucetTXN = new (_d82‍.a("Transaction",Transaction))((_d82‍.a("faucetAddress",faucetAddress)), toAddress, requestAmount, 0, _d82‍.a("createDate",createDate)(), "faucet tx", (_d82‍.a("faucetPublicKeyComp",faucetPublicKeyComp)));
        faucetTXN.signTransaction(_d82‍.a("faucetPrivKey",faucetPrivKey), "fromTheFaucet!");
        _d82‍.a("MIEWCOIN_BLOCKCHAIN",MIEWCOIN_BLOCKCHAIN).pendingTransactions.push(faucetTXN);
    }
    return true;
}

// for some reason causes issue when a new node starts because it takes the port ie. HTTP_PORT=4000 P2P_PORT=6002 PEERS=ws://localhost:6001 npm start
       function initFaucetServer() {
    let app = express();
    app.use(express.urlencoded({ extended: false }));
    app.use(express.json());
    app.set('view engine', 'ejs');
    app.engine('html', require('ejs').renderFile);
    app.use(express.static('public'));

        // get faucet page
        app.get('/faucet', (req, res) => {
            res.render('../views/faucet.html');
        });
    
        app.post('/faucet', (req, res) => {
            // faucetTransaction(req.body.toAddress, req.body.requestAmount);
            let toAddress = req.body.toAddress;
            let requestAmount = req.body.requestAmount;
            faucetTransaction(toAddress, requestAmount);
            // .then((transaction) => {
            //     drawView(res, 'faucet', {
            //         toAddress: toAddress,
            //         requestAmount: requestAmount
            //     })
            // })
        });

    app.listen(faucetHttp_port, () => _d82‍.g.console.log('Faucet listening http on port: ' + faucetHttp_port));    
}

function drawView(res, view, data) {
    res.render('../views/' + view + '.html', data)
}

initFaucetServer();
