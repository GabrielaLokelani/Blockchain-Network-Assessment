
'use strict';;let BlockChain,Transaction,createWallet,validateWallet,MIEWCOIN_BLOCKCHAIN;_8ee‍.x([["initialPeers",()=>initialPeers],["initHttpServer",()=>initHttpServer],["initP2PServer",()=>initP2PServer],["connectToPeers",()=>connectToPeers],["responseLatestMsg",()=>responseLatestMsg],["broadcast",()=>broadcast]]);_8ee‍.w("./chain",[["default",["BlockChain"],function(v){BlockChain=v}]]);_8ee‍.w("./transaction",[["default",["Transaction"],function(v){Transaction=v}]]);_8ee‍.w("./wallet",[["createWallet",["createWallet"],function(v){createWallet=v}],["validateWallet",["validateWallet"],function(v){validateWallet=v}]]);_8ee‍.w("../index",[["MIEWCOIN_BLOCKCHAIN",["MIEWCOIN_BLOCKCHAIN"],function(v){MIEWCOIN_BLOCKCHAIN=v}]]);

// IMPORT RELEVANT LIBRARIES
const CryptoJS = require('crypto-js');
const express = require('express');
const WebSocket = require('ws');
const bodyParser = require('body-parser');






const http_port = process.env.HTTP_PORT || 5555;
const p2p_port = process.env.P2P_PORT || 6001;
       const initialPeers = process.env.PEERS ? process.env.PEERS.split(',') : [];;_8ee‍.j(["initialPeers"]);

var sockets = [];
let MessageType = {
    QUERY_LATEST: 0,
    QUERY_ALL: 1,
    RESPONSE_BLOCKCHAIN: 2
};

// initialize the new blockcahin
// export function createChain() {
//     const MIEWCOIN_BLOCKCHAIN = new BlockChain();
//     return MIEWCOIN_BLOCKCHAIN;
// }

// createChain()


// rest api logic for blocks, createWallet, pendingTransactions, minePendingTransactions, peers, still fixing sendTransaction
       function initHttpServer() {
    let app = express();
    app.use(bodyParser.json());

    const myWallet = _8ee‍.a("createWallet",createWallet)();
    _8ee‍.g.console.log('MyWallet: address: ' + myWallet.address + '\n' + 'myWallet publicKey: ' + myWallet.publicKey + '\n' + 'myWaalet privateKey: ' + myWallet.privateKey + '\n' + 'myWaalet keypair:' + myWallet.keyPair);
    const jakeWallet = _8ee‍.a("createWallet",createWallet)();
    _8ee‍.g.console.log('jakeWallet: address: ' + jakeWallet.address + '\n' + 'jakeWallet publicKey: ' + jakeWallet.publicKey + '\n' + 'myWaalet privateKey: ' + jakeWallet.privateKey + '\n' + 'myWaalet keypair:' + jakeWallet.keyPair);
    _8ee‍.g.console.log("is myWallet privateKey equal to publicKey?", _8ee‍.a("validateWallet",validateWallet)(jakeWallet.privateKey, jakeWallet.publicKey));

    // init transaction and send 50 coins to jakes wallet
    const txn1 = new (_8ee‍.a("Transaction",Transaction))(myWallet.address, jakeWallet.address, 50, 20, Date.now(), 'first transaction data!', myWallet.publicKey);

    // sign 
    txn1.signTransaction(myWallet.keyPair);

    // submit txn
    _8ee‍.a("MIEWCOIN_BLOCKCHAIN",MIEWCOIN_BLOCKCHAIN).addTransaction(txn1);

    // get all blocks in the blockchain
    app.get('/blocks', (req, res) => res.send(JSON.stringify(_8ee‍.a("MIEWCOIN_BLOCKCHAIN",MIEWCOIN_BLOCKCHAIN))));

    // create a new wallet and return the public and private keys
    app.post('/createWallet', (req, res) => {
        let newWallet = _8ee‍.a("createWallet",createWallet)();
        console.log('testing new console.log');
        _8ee‍.g.console.log('New wallet! ' + 'address: ' + newWallet.address + ' pubKey: ' + newWallet.publicKey + ' privKey: ' + newWallet.privateKey + ' ' + 'keyPair: ' + newWallet.keyPair);
        res.send({ "pubKey": newWallet.publicKey, "privKey": newWallet.privateKey });
    });

    // get all pending transactions
    app.get('/transactions/pending', (req, res) => {
        res.send(JSON.stringify(_8ee‍.a("MIEWCOIN_BLOCKCHAIN",MIEWCOIN_BLOCKCHAIN).pendingTransactions))
    })

    app.post('/transactions/send', (req, res) => {
        // init transaction and send 50 coins to jakes wallet
        const newTXN = new (_8ee‍.a("Transaction",Transaction))(req.body.from, req.body.to, req.body.value, req.body.fee, Date.now(), req.body.data, req.body.senderPubKey);

        // sign 
        // now need to make it so any wallet can sign not just tempm myWallet
        newTXN.signTransaction(myWallet.keyPair);
        _8ee‍.g.console.log("signTransaction signkey NODE:" + myWallet.keyPair);

        // submit txn
        _8ee‍.a("MIEWCOIN_BLOCKCHAIN",MIEWCOIN_BLOCKCHAIN).addTransaction(newTXN);
        console.log("congragulations! Transaction was sent");
        res.send();
    });

    // mine pending txns to mine the next block
    app.post('/minePendingTransactions', (req, res) => {
    _8ee‍.a("MIEWCOIN_BLOCKCHAIN",MIEWCOIN_BLOCKCHAIN).minePendingTransactions(req.body);
    broadcast(responseLatestMsg());
    _8ee‍.g.console.log('block added: ' + JSON.stringify(_8ee‍.a("MIEWCOIN_BLOCKCHAIN",MIEWCOIN_BLOCKCHAIN)))
    res.send()
    });

    app.post('/resetChain', (req, res) => {
        const MIEWCOIN_BLOCKCHAIN = new (_8ee‍.a("BlockChain",BlockChain))();
        res.send(JSON.stringify(MIEWCOIN_BLOCKCHAIN));
    })

    // get array of connected peers
    app.get('/peers', (req, res) => {
        res.send(sockets.map(s => s._socket.remoteAddress + ':' + s._socket.remotePort));
    });

    app.post('/addPeer', (req, res) => {
        connectToPeers([req.body.peer]);
        res.send();
    });

    app.listen(http_port, () => _8ee‍.g.console.log('Listening http on port: ' + http_port));
}

       let initP2PServer = () => {
    let server = new WebSocket.Server({port: p2p_port});
    server.on('connection', ws => initConnection(ws));
    _8ee‍.g.console.log('listening websocket p2p port on: ' + p2p_port);

};;_8ee‍.j(["initP2PServer"]);

let handleBlockchainResponse = (message) => {
    let receivedBlocks = JSON.parse(message.data).sort((b1, b2) => (b1.index - b2.index));
    let latestBlockReceived = receivedBlocks[receivedBlocks.length - 1];
    let latestBlockHeld = _8ee‍.a("MIEWCOIN_BLOCKCHAIN",MIEWCOIN_BLOCKCHAIN).getBlock(_8ee‍.a("MIEWCOIN_BLOCKCHAIN",MIEWCOIN_BLOCKCHAIN).getHeight());
    if (latestBlockReceived.index > latestBlockHeld.index) {
        _8ee‍.g.console.log('blockchain possibly behind. We got: ' + latestBlockHeld.index + ' Peer got: ' + latestBlockReceived.index);
        if (latestBlockHeld.blockHash === latestBlockReceived.previousBlockHash) {
            console.log("We can append the received block to our chain");
            _8ee‍.a("MIEWCOIN_BLOCKCHAIN",MIEWCOIN_BLOCKCHAIN).addBlock(latestBlockReceived);
            broadcast(responseLatestMsg());
        } else if (receivedBlocks.length === 1) {
            console.log("We have to query the chain from our peer");
            broadcast(queryAllMsg());
        } else {
            console.log("Received blockchain is longer than current blockchain");
            replaceChain(receivedBlocks);
        }
    } else {
        console.log('received blockchain is not longer than current blockchain. Do nothing');
    }
};

var initMessageHandler = (ws) => {
    ws.on('message', (data) => {
        var message = JSON.parse(data);
        _8ee‍.g.console.log('Recieved message' + JSON.stringify(message));
        switch (message.type) {
            case MessageType.QUERY_LATEST:
                write(ws, responseLatestMsg());
                break;
            case MessageType.QUERY_ALL:
                write(ws, responseChainMsg());
                break;
            case MessageType.RESPONSE_BLOCKCHAIN:
                handleBlockchainResponse(message);
                break;
        }
    });
};

var initErrorHandler = (ws) => {
    var closeConnection = (ws) => {
        _8ee‍.g.console.log('connection failed to peer: ' + ws.url);
        sockets.splice(sockets.indexOf(ws), 1);
    };
    ws.on('close', () => closeConnection(ws));
    ws.on('error', () => closeConnection(ws));
};

let initConnection = (ws) => {
    sockets.push(ws);
    initMessageHandler(ws);
    initErrorHandler(ws);
    write(ws, queryChainLengthMsg());
};

       let connectToPeers = (newPeers) => {
    newPeers.forEach((peer) => {
        let ws = new WebSocket(peer);
        ws.on('open', () => initConnection(ws));
        ws.on('error', () => {
            console.log('connection failed')
        });
    });
};;_8ee‍.j(["connectToPeers"]);

let queryChainLengthMsg = () => ({'type': MessageType.QUERY_LATEST});
let queryAllMsg = () => ({'type': MessageType.QUERY_ALL});
let responseChainMsg = () =>({
    'type': MessageType.RESPONSE_BLOCKCHAIN, 'data': JSON.stringify(_8ee‍.a("MIEWCOIN_BLOCKCHAIN",MIEWCOIN_BLOCKCHAIN))
});
       let responseLatestMsg = () => ({
    'type': MessageType.RESPONSE_BLOCKCHAIN,
    'data': JSON.stringify([_8ee‍.a("MIEWCOIN_BLOCKCHAIN",MIEWCOIN_BLOCKCHAIN).getBlock(_8ee‍.a("MIEWCOIN_BLOCKCHAIN",MIEWCOIN_BLOCKCHAIN).getHeight())])
});;_8ee‍.j(["responseLatestMsg"]);

let write = (ws, message) => ws.send(JSON.stringify(message));
       let broadcast = (message) => sockets.forEach(socket => write(socket, message));;_8ee‍.j(["broadcast"]);