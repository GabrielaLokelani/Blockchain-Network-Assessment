let keyPairFromPriv;_67c‍.x([["default",()=>Transaction]]);_67c‍.w("./wallet",[["keyPairFromPriv",["keyPairFromPriv"],function(v){keyPairFromPriv=v}]]);
// IMPORT RELEVANT LIBRARIES
// const CryptoJS = require('crypto-js');
// const EC = require('elliptic').ec;
// const ec = new EC('secp256k1');

const CryptoJS = require('crypto-js');
let elliptic = require('elliptic');
let ec = new elliptic.ec('secp256k1');
let ecdsa = require('ecdsa')('secp256k1');
// const EC = require('elliptic').ec;
// const ec = new EC('secp256k1');


// (*** simplified for now, add extra params later ***)
               class Transaction {
    constructor(from, to, value, fee, dateCreated, data, senderPubKey, senderPrivKey) {
        this.from = from;
        this.to = to;
        this.value = value;
        this.fee = fee;
        this.dateCreated = dateCreated;
        this.data = data;
        this.senderPubKey = senderPubKey;
        this.senderPrivKey = senderPrivKey;
    }

    calculateTransactionHash() {
        return CryptoJS.SHA256(this.from + this.to + this.value + this.fee + this.dateCreated + this.data + this.senderPubKey).toString();
    }

    // sign the transaction with the private key
    signTransaction(privateKey, scrtMsg) {
        // check miner tx is valid
        if (this.from === null) return true;

        // extract the keypair from private key
        const signingKey = keyPairFromPriv(privateKey);

        // verify source account is person's address
        const publicKey = signingKey.getPublic();
        const publicKeyCompressed = publicKey.encodeCompressed("hex");

        if (publicKeyCompressed !== this.senderPubKey) {
            throw new Error('Sorry, you cannot sign transactions from a foreign wallet!');
        }

        // sign tx hash w/ private key
        this.transactionHash = this.calculateTransactionHash();
        var msg = CryptoJS.SHA256(scrtMsg);
        _67c‍.g.console.log("Here is the hashed secret ms hash:   " + msg);

        // const sign = signingKey.sign(this.transactionHash, 'base64');
        // let sign = ec.sign(msg, privateKey, 'hex', {canonical: true});
        // console.log("you have reached the signing:  " + sign);

        var signature = ecdsa.sign(msg, privateKey)
        var isValid = ecdsa.verify(msg, signature, publicKeyCompressed)
        _67c‍.g.console.log(isValid) //true

        // signature to DER format
        this.signature = signature;
        _67c‍.g.console.log('signature: ' + this.signature);
    }

    signRewardTransaction(privateKey) {
        this.transactionHash = this.calculateTransactionHash();
        this.signature = privateKey;
    }

    isValid() {
        // if miner fee transaction fromAddress is empty, verification cannot be completed.
        if (this.from === null) return true;
        // Determine if the signature exists
        if (!this.signature || this.signature.length === 0) {
            throw new Error('No signature in this transaction');
        }
        // fromAddress to get the public key (this process is reversible, as it is just a format conversion process.)
        const publicKey = ec.keyFromPublic(this.senderPubKey, 'hex');
        // Use the public key to verify if the signature is correct, or more specifically if the transaction was actually initiated from fromAddress.
        return publicKey.verify(this.calculateTransactionHash(), this.signature);
    }
}